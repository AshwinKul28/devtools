"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/base32.js";
exports.ids = ["vendor-chunks/base32.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/base32.js/base32.js":
/*!******************************************!*\
  !*** ./node_modules/base32.js/base32.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Generate a character map.\n * @param {string} alphabet e.g. \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"\n * @param {object} mappings map overrides from key to value\n * @method\n */ var charmap = function(alphabet, mappings) {\n    mappings || (mappings = {});\n    alphabet.split(\"\").forEach(function(c, i) {\n        if (!(c in mappings)) mappings[c] = i;\n    });\n    return mappings;\n};\n/**\n * The RFC 4648 base 32 alphabet and character map.\n * @see {@link https://tools.ietf.org/html/rfc4648}\n */ var rfc4648 = {\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    charmap: {\n        0: 14,\n        1: 8\n    }\n};\nrfc4648.charmap = charmap(rfc4648.alphabet, rfc4648.charmap);\n/**\n * The Crockford base 32 alphabet and character map.\n * @see {@link http://www.crockford.com/wrmg/base32.html}\n */ var crockford = {\n    alphabet: \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\",\n    charmap: {\n        O: 0,\n        I: 1,\n        L: 1\n    }\n};\ncrockford.charmap = charmap(crockford.alphabet, crockford.charmap);\n/**\n * base32hex\n * @see {@link https://en.wikipedia.org/wiki/Base32#base32hex}\n */ var base32hex = {\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    charmap: {}\n};\nbase32hex.charmap = charmap(base32hex.alphabet, base32hex.charmap);\n/**\n * Create a new `Decoder` with the given options.\n *\n * @param {object} [options]\n *   @param {string} [type] Supported Base-32 variants are \"rfc4648\" and\n *     \"crockford\".\n *   @param {object} [charmap] Override the character map used in decoding.\n * @constructor\n */ function Decoder(options) {\n    this.buf = [];\n    this.shift = 8;\n    this.carry = 0;\n    if (options) {\n        switch(options.type){\n            case \"rfc4648\":\n                this.charmap = exports.rfc4648.charmap;\n                break;\n            case \"crockford\":\n                this.charmap = exports.crockford.charmap;\n                break;\n            case \"base32hex\":\n                this.charmap = exports.base32hex.charmap;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        if (options.charmap) this.charmap = options.charmap;\n    }\n}\n/**\n * The default character map coresponds to RFC4648.\n */ Decoder.prototype.charmap = rfc4648.charmap;\n/**\n * Decode a string, continuing from the previous state.\n *\n * @param {string} str\n * @return {Decoder} this\n */ Decoder.prototype.write = function(str) {\n    var charmap = this.charmap;\n    var buf = this.buf;\n    var shift = this.shift;\n    var carry = this.carry;\n    // decode string\n    str.toUpperCase().split(\"\").forEach(function(char) {\n        // ignore padding\n        if (char == \"=\") return;\n        // lookup symbol\n        var symbol = charmap[char] & 0xff;\n        // 1: 00000 000\n        // 2:          00 00000 0\n        // 3:                    0000 0000\n        // 4:                             0 00000 00\n        // 5:                                       000 00000\n        // 6:                                                00000 000\n        // 7:                                                         00 00000 0\n        shift -= 5;\n        if (shift > 0) {\n            carry |= symbol << shift;\n        } else if (shift < 0) {\n            buf.push(carry | symbol >> -shift);\n            shift += 8;\n            carry = symbol << shift & 0xff;\n        } else {\n            buf.push(carry | symbol);\n            shift = 8;\n            carry = 0;\n        }\n    });\n    // save state\n    this.shift = shift;\n    this.carry = carry;\n    // for chaining\n    return this;\n};\n/**\n * Finish decoding.\n *\n * @param {string} [str] The final string to decode.\n * @return {Array} Decoded byte array.\n */ Decoder.prototype.finalize = function(str) {\n    if (str) {\n        this.write(str);\n    }\n    if (this.shift !== 8 && this.carry !== 0) {\n        this.buf.push(this.carry);\n        this.shift = 8;\n        this.carry = 0;\n    }\n    return this.buf;\n};\n/**\n * Create a new `Encoder` with the given options.\n *\n * @param {object} [options]\n *   @param {string} [type] Supported Base-32 variants are \"rfc4648\" and\n *     \"crockford\".\n *   @param {object} [alphabet] Override the alphabet used in encoding.\n * @constructor\n */ function Encoder(options) {\n    this.buf = \"\";\n    this.shift = 3;\n    this.carry = 0;\n    if (options) {\n        switch(options.type){\n            case \"rfc4648\":\n                this.alphabet = exports.rfc4648.alphabet;\n                break;\n            case \"crockford\":\n                this.alphabet = exports.crockford.alphabet;\n                break;\n            case \"base32hex\":\n                this.alphabet = exports.base32hex.alphabet;\n                break;\n            default:\n                throw new Error(\"invalid type\");\n        }\n        if (options.alphabet) this.alphabet = options.alphabet;\n        else if (options.lc) this.alphabet = this.alphabet.toLowerCase();\n    }\n}\n/**\n * The default alphabet coresponds to RFC4648.\n */ Encoder.prototype.alphabet = rfc4648.alphabet;\n/**\n * Encode a byte array, continuing from the previous state.\n *\n * @param {byte[]} buf The byte array to encode.\n * @return {Encoder} this\n */ Encoder.prototype.write = function(buf) {\n    var shift = this.shift;\n    var carry = this.carry;\n    var symbol;\n    var byte;\n    var i;\n    // encode each byte in buf\n    for(i = 0; i < buf.length; i++){\n        byte = buf[i];\n        // 1: 00000 000\n        // 2:          00 00000 0\n        // 3:                    0000 0000\n        // 4:                             0 00000 00\n        // 5:                                       000 00000\n        // 6:                                                00000 000\n        // 7:                                                         00 00000 0\n        symbol = carry | byte >> shift;\n        this.buf += this.alphabet[symbol & 0x1f];\n        if (shift > 5) {\n            shift -= 5;\n            symbol = byte >> shift;\n            this.buf += this.alphabet[symbol & 0x1f];\n        }\n        shift = 5 - shift;\n        carry = byte << shift;\n        shift = 8 - shift;\n    }\n    // save state\n    this.shift = shift;\n    this.carry = carry;\n    // for chaining\n    return this;\n};\n/**\n * Finish encoding.\n *\n * @param {byte[]} [buf] The final byte array to encode.\n * @return {string} The encoded byte array.\n */ Encoder.prototype.finalize = function(buf) {\n    if (buf) {\n        this.write(buf);\n    }\n    if (this.shift !== 3) {\n        this.buf += this.alphabet[this.carry & 0x1f];\n        this.shift = 3;\n        this.carry = 0;\n    }\n    return this.buf;\n};\n/**\n * Convenience encoder.\n *\n * @param {byte[]} buf The byte array to encode.\n * @param {object} [options] Options to pass to the encoder.\n * @return {string} The encoded string.\n */ exports.encode = function(buf, options) {\n    return new Encoder(options).finalize(buf);\n};\n/**\n * Convenience decoder.\n *\n * @param {string} str The string to decode.\n * @param {object} [options] Options to pass to the decoder.\n * @return {byte[]} The decoded byte array.\n */ exports.decode = function(str, options) {\n    return new Decoder(options).finalize(str);\n};\n// Exports.\nexports.Decoder = Decoder;\nexports.Encoder = Encoder;\nexports.charmap = charmap;\nexports.crockford = crockford;\nexports.rfc4648 = rfc4648;\nexports.base32hex = base32hex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/base32.js/base32.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/base32.js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base32.js/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Module dependencies.\nvar base32 = __webpack_require__(/*! ./base32 */ \"(ssr)/./node_modules/base32.js/base32.js\");\n// Wrap decoder finalize to return a buffer;\nvar finalizeDecode = base32.Decoder.prototype.finalize;\nbase32.Decoder.prototype.finalize = function(buf) {\n    var bytes = finalizeDecode.call(this, buf);\n    return new Buffer(bytes);\n};\n// Export Base32.\nmodule.exports = base32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmFzZTMyLmpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsdUJBQXVCO0FBQ3ZCLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDLDBEQUFVO0FBRy9CLDRDQUE0QztBQUM1QyxJQUFJQyxpQkFBaUJGLE9BQU9HLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRO0FBQ3RETCxPQUFPRyxPQUFPLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHLFNBQVVDLEdBQUc7SUFDL0MsSUFBSUMsUUFBUUwsZUFBZU0sSUFBSSxDQUFDLElBQUksRUFBRUY7SUFDdEMsT0FBTyxJQUFJRyxPQUFPRjtBQUNwQjtBQUdBLGlCQUFpQjtBQUNqQkcsT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL2VuY29kaW5nLXV0aWxpdGllcy8uL25vZGVfbW9kdWxlcy9iYXNlMzIuanMvaW5kZXguanM/YzVhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gTW9kdWxlIGRlcGVuZGVuY2llcy5cbnZhciBiYXNlMzIgPSByZXF1aXJlKFwiLi9iYXNlMzJcIik7XG5cblxuLy8gV3JhcCBkZWNvZGVyIGZpbmFsaXplIHRvIHJldHVybiBhIGJ1ZmZlcjtcbnZhciBmaW5hbGl6ZURlY29kZSA9IGJhc2UzMi5EZWNvZGVyLnByb3RvdHlwZS5maW5hbGl6ZTtcbmJhc2UzMi5EZWNvZGVyLnByb3RvdHlwZS5maW5hbGl6ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgdmFyIGJ5dGVzID0gZmluYWxpemVEZWNvZGUuY2FsbCh0aGlzLCBidWYpO1xuICByZXR1cm4gbmV3IEJ1ZmZlcihieXRlcyk7XG59O1xuXG5cbi8vIEV4cG9ydCBCYXNlMzIuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2UzMjtcbiJdLCJuYW1lcyI6WyJiYXNlMzIiLCJyZXF1aXJlIiwiZmluYWxpemVEZWNvZGUiLCJEZWNvZGVyIiwicHJvdG90eXBlIiwiZmluYWxpemUiLCJidWYiLCJieXRlcyIsImNhbGwiLCJCdWZmZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/base32.js/index.js\n");

/***/ })

};
;